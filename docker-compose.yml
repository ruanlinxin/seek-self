version: '1.5'

services:
  # MySQL 数据库服务
  mysql:
    image: mysql:8.0
    container_name: seek-self-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: seek_self
      MYSQL_USER: seek_user
      MYSQL_PASSWORD: seek_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password

  # PeerJS 服务器
  peerjs-server:
    build:
      context: ./peerjs-server
      dockerfile: Dockerfile
    container_name: seek-self-peerjs
    restart: unless-stopped
    environment:
      - PEERJS_PORT=9000
      - PEERJS_KEY=seek-self-peerjs-key
      - PEERJS_DEBUG=true
      - PEERJS_ALLOW_DISCOVERY=true
      - PEERJS_CONCURRENT_LIMIT=5000
      - PEERJS_ALIVE_TIMEOUT=60000
      - PEERJS_PROXY=true
      - PEERJS_S2S=true
    # 端口通过 nginx 转发，不需要直接暴露
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  panel:
    build:
      context: ./panel
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - VITE_PEERJS_HOST=localhost
      - VITE_PEERJS_PORT=10000
      - VITE_PEERJS_PATH=/peerjs
      - VITE_PEERJS_KEY=seek-self-peerjs-key
    networks:
      - app-network
    depends_on:
      peerjs-server:
        condition: service_healthy

  # 后端 API 服务
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 20000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USERNAME: seek_user
      DB_PASSWORD: seek_password
      DB_DATABASE: seek_self
      JWT_SECRET: your-secret-key
      JWT_EXPIRES_IN: 24h
      PEERJS_HOST: peerjs-server
      PEERJS_PORT: 9000
      PEERJS_KEY: seek-self-peerjs-key
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      peerjs-server:
        condition: service_healthy
    networks:
      - app-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "10000:80"  # 主端口
      - "10443:443"  # HTTPS 端口（可选）
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - server
      - panel
      - peerjs-server
    restart: unless-stopped
    networks:
      - app-network

volumes:
  mysql_data:
    driver: local

networks:
  app-network:
    driver: bridge

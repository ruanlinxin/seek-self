name: Build

# 只能手动触发，支持所有分支
on:
  workflow_dispatch:
    inputs:
      build_target:
        description: '选择构建目标'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - web
          - mobile
          - server
      build_type:
        description: '构建类型'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug

# 权限设置
permissions:
  contents: read
  actions: write

jobs:
  # 准备构建环境
  prepare:
    runs-on: ubuntu-latest
    outputs:
      build_time: ${{ steps.time.outputs.build_time }}
      branch_name: ${{ steps.branch.outputs.branch_name }}
      commit_sha: ${{ steps.commit.outputs.commit_sha }}
      version_web: ${{ steps.version.outputs.version_web }}
      version_mobile: ${{ steps.version.outputs.version_mobile }}
      version_server: ${{ steps.version.outputs.version_server }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          corepack: true

      - name: Enable Yarn Modern
        run: |
          corepack enable
          yarn set version stable
          yarn --version

      - name: Get build time
        id: time
        run: echo "build_time=$(date '+%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Get branch name
        id: branch
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Get commit SHA
        id: commit
        run: echo "commit_sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT

      - name: Generate versions
        id: version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BUILD_TIME=$(date '+%Y%m%d-%H%M%S')
          echo "version_web=${BRANCH_NAME}-${BUILD_TIME}-web" >> $GITHUB_OUTPUT
          echo "version_mobile=${BRANCH_NAME}-${BUILD_TIME}-mobile" >> $GITHUB_OUTPUT
          echo "version_server=${BRANCH_NAME}-${BUILD_TIME}-server" >> $GITHUB_OUTPUT

  # Web端构建
  build-web:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'web' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          corepack: true

      - name: Enable Yarn Modern
        run: |
          corepack enable
          yarn set version stable

      - name: Install dependencies (Workspace)
        run: |
          yarn install --immutable
          yarn workspaces list

      - name: Install Lerna globally
        run: npm install -g lerna@^8.2.3

      - name: Build web (Lerna)
        run: lerna run build --scope=web

      - name: Create web build package
        run: |
          cd ${{ github.workspace }}
          mkdir -p dist/web
          
          # 复制构建产物
          cp -r web/dist dist/web/
          cp web/Dockerfile dist/web/
          cp web/nginx.conf dist/web/
          cp docker-compose.yml dist/
          cp -r nginx dist/
          
          # 创建构建信息
          cat > dist/web/build-info.txt << EOF
          Web端构建信息
          =============
          版本号: ${{ needs.prepare.outputs.version_web }}
          构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')
          分支: ${{ needs.prepare.outputs.branch_name }}
          提交: ${{ needs.prepare.outputs.commit_sha }}
          构建类型: ${{ github.event.inputs.build_type }}
          触发者: ${{ github.actor }}
          
          构建产物:
          - Web 静态文件: dist/
          - Docker 配置: Dockerfile, nginx.conf
          - 服务配置: docker-compose.yml, nginx/
          
          构建状态: 成功
          EOF

      - name: Create web archive
        run: |
          cd dist
          tar -czf web-${{ needs.prepare.outputs.version_web }}.tar.gz web/ docker-compose.yml nginx/

      - name: Upload web artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-${{ needs.prepare.outputs.version_web }}
          path: |
            dist/web-${{ needs.prepare.outputs.version_web }}.tar.gz
            dist/web/build-info.txt
          retention-days: 30

  # 移动端构建
  build-mobile:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'mobile' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          corepack: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          build-tools: 33.0.0
          ndk-version: 25.1.8937393

      - name: Enable Yarn Modern
        run: |
          corepack enable
          yarn set version stable

      - name: Install dependencies (Workspace)
        run: |
          yarn install --immutable
          yarn workspaces list

      - name: Prebuild Android (Workspace)
        run: |
          if [ ! -d "mobile/android" ]; then
            echo "执行预构建..."
            yarn workspace mobile expo prebuild --platform android --clean
          else
            echo "Android 项目已存在，跳过预构建"
          fi

      - name: Create local.properties
        run: |
          cd mobile/android
          echo "sdk.dir=$ANDROID_HOME" > local.properties

      - name: Build Android APK
        run: |
          cd mobile/android
          chmod +x gradlew
          ./gradlew clean
          if [ "${{ github.event.inputs.build_type }}" == "release" ]; then
            ./gradlew assembleRelease
          else
            ./gradlew assembleDebug
          fi

      - name: Create mobile build package
        run: |
          mkdir -p dist/mobile
          
          # 复制 APK 文件
          if [ "${{ github.event.inputs.build_type }}" == "release" ]; then
            cp mobile/android/app/build/outputs/apk/release/app-release.apk dist/mobile/${{ needs.prepare.outputs.version_mobile }}.apk
          else
            cp mobile/android/app/build/outputs/apk/debug/app-debug.apk dist/mobile/${{ needs.prepare.outputs.version_mobile }}.apk
          fi
          
          # 获取 APK 信息
          APK_SIZE=$(du -h dist/mobile/${{ needs.prepare.outputs.version_mobile }}.apk | cut -f1)
          
          # 创建构建信息
          cat > dist/mobile/build-info.txt << EOF
          移动端构建信息
          ===============
          版本号: ${{ needs.prepare.outputs.version_mobile }}
          构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')
          分支: ${{ needs.prepare.outputs.branch_name }}
          提交: ${{ needs.prepare.outputs.commit_sha }}
          构建类型: ${{ github.event.inputs.build_type }}
          触发者: ${{ github.actor }}
          
          构建产物:
          - APK 文件: ${{ needs.prepare.outputs.version_mobile }}.apk
          - 文件大小: ${APK_SIZE}
          
          安装说明:
          1. 下载 APK 文件到 Android 设备
          2. 开启"未知来源"应用安装权限
          3. 点击 APK 文件进行安装
          
          构建状态: 成功
          EOF

      - name: Upload mobile artifact
        uses: actions/upload-artifact@v4
        with:
          name: mobile-${{ needs.prepare.outputs.version_mobile }}
          path: dist/mobile/
          retention-days: 30

  # 服务端构建
  build-server:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'server' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          corepack: true

      - name: Enable Yarn Modern
        run: |
          corepack enable
          yarn set version stable

      - name: Install dependencies (Workspace)
        run: |
          yarn install --immutable
          yarn workspaces list

      - name: Install Lerna globally
        run: npm install -g lerna@^8.2.3

      - name: Build server (Lerna)
        run: lerna run build --scope=server

      - name: Create server build package
        run: |
          cd ${{ github.workspace }}
          mkdir -p dist/server
          
          # 复制构建产物
          cp -r server/dist dist/server/
          cp server/package.json dist/server/
          if [ -f "server/Dockerfile" ]; then
            cp server/Dockerfile dist/server/
          fi
          if [ -f "server/.env.example" ]; then
            cp server/.env.example dist/server/
          fi
          cp docker-compose.yml dist/
          cp -r nginx dist/
          
          # 创建构建信息
          cat > dist/server/build-info.txt << EOF
          服务端构建信息
          ===============
          版本号: ${{ needs.prepare.outputs.version_server }}
          构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')
          分支: ${{ needs.prepare.outputs.branch_name }}
          提交: ${{ needs.prepare.outputs.commit_sha }}
          构建类型: ${{ github.event.inputs.build_type }}
          触发者: ${{ github.actor }}
          
          构建产物:
          - 服务端代码: dist/
          - 生产依赖: package.json
          - Docker 配置: Dockerfile (如果存在)
          - 环境配置: .env.example (如果存在)
          - 服务配置: docker-compose.yml, nginx/
          
          部署说明:
          1. 安装生产依赖: npm install --production
          2. 设置环境变量: 复制 .env.example 为 .env 并配置
          3. 启动服务: npm start 或 docker-compose up -d
          4. 验证服务: curl http://localhost:3000/health
          
          构建状态: 成功
          EOF

      - name: Create server archive
        run: |
          cd dist
          tar -czf server-${{ needs.prepare.outputs.version_server }}.tar.gz server/ docker-compose.yml nginx/

      - name: Upload server artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-${{ needs.prepare.outputs.version_server }}
          path: |
            dist/server-${{ needs.prepare.outputs.version_server }}.tar.gz
            dist/server/build-info.txt
          retention-days: 30

  # 构建总结
  build-summary:
    runs-on: ubuntu-latest
    needs: [prepare, build-web, build-mobile, build-server]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## 🚀 构建总结" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 构建信息" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 构建时间 | $(date '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| 分支 | ${{ needs.prepare.outputs.branch_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 提交 | ${{ needs.prepare.outputs.commit_sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 构建目标 | ${{ github.event.inputs.build_target }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 构建类型 | ${{ github.event.inputs.build_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 触发者 | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 版本信息" >> $GITHUB_STEP_SUMMARY
          echo "| 端 | 版本号 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| Web | ${{ needs.prepare.outputs.version_web }} | ${{ needs.build-web.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Mobile | ${{ needs.prepare.outputs.version_mobile }} | ${{ needs.build-mobile.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Server | ${{ needs.prepare.outputs.version_server }} | ${{ needs.build-server.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 下载链接" >> $GITHUB_STEP_SUMMARY
          echo "构建完成后，可在 Actions 页面的 Artifacts 部分下载对应的构建产物。" >> $GITHUB_STEP_SUMMARY

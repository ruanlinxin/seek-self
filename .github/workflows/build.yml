name: Build

# 只能手动触发，支持所有分支
on:
  workflow_dispatch:
    inputs:
      build_target:
        description: '选择构建目标'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - web
          - server
      build_type:
        description: '构建类型'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug

# 权限设置
permissions:
  contents: read
  actions: write

jobs:
  # 准备构建环境
  prepare:
    runs-on: ubuntu-latest
    outputs:
      build_time: ${{ steps.time.outputs.build_time }}
      branch_name: ${{ steps.branch.outputs.branch_name }}
      commit_sha: ${{ steps.commit.outputs.commit_sha }}
      version_web: ${{ steps.version.outputs.version_web }}
      version_server: ${{ steps.version.outputs.version_server }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          corepack: true

      - name: Enable Yarn Modern
        run: |
          corepack enable
          yarn set version stable
          yarn --version

      - name: Get build time
        id: time
        run: echo "build_time=$(date '+%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Get branch name
        id: branch
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Get commit SHA
        id: commit
        run: echo "commit_sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT

      - name: Generate versions
        id: version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BUILD_TIME=$(date '+%Y%m%d-%H%M%S')
          echo "version_web=${BRANCH_NAME}-${BUILD_TIME}-web" >> $GITHUB_OUTPUT
          echo "version_server=${BRANCH_NAME}-${BUILD_TIME}-server" >> $GITHUB_OUTPUT

  # Web端构建
  build-web:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'web' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          corepack: true

      - name: Enable Yarn Modern
        run: |
          corepack enable
          yarn set version stable

      - name: Install dependencies (Workspace)
        run: |
          yarn install --immutable
          yarn workspaces list

      - name: Install Lerna globally
        run: npm install -g lerna@^8.2.3

      - name: Build web (Lerna)
        run: lerna run build --scope=web

      - name: Create web build info
        run: |
          mkdir -p web/dist
          cat > web/dist/build-info.txt << EOF
          Web端构建信息
          =============
          版本号: ${{ needs.prepare.outputs.version_web }}
          构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')
          分支: ${{ needs.prepare.outputs.branch_name }}
          提交: ${{ needs.prepare.outputs.commit_sha }}
          构建类型: ${{ github.event.inputs.build_type }}
          触发者: ${{ github.actor }}
          
          构建产物:
          - Web 静态文件: dist/
          - Docker 配置: Dockerfile
          
          构建状态: 成功
          EOF

      - name: Upload web artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: |
            web/dist/
            web/Dockerfile
          retention-days: 30


  # 服务端构建
  build-server:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'server' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          corepack: true

      - name: Enable Yarn Modern
        run: |
          corepack enable
          yarn set version stable

      - name: Install dependencies (Workspace)
        run: |
          yarn install --immutable
          yarn workspaces list

      - name: Install Lerna globally
        run: npm install -g lerna@^8.2.3

      - name: Build server (Lerna)
        run: lerna run build --scope=server

      - name: Create server build info
        run: |
          mkdir -p server/dist
          cat > server/dist/build-info.txt << EOF
          服务端构建信息
          ===============
          版本号: ${{ needs.prepare.outputs.version_server }}
          构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')
          分支: ${{ needs.prepare.outputs.branch_name }}
          提交: ${{ needs.prepare.outputs.commit_sha }}
          构建类型: ${{ github.event.inputs.build_type }}
          触发者: ${{ github.actor }}
          
          构建产物:
          - 服务端代码: dist/
          - 生产依赖: package.json
          - Docker 配置: Dockerfile
          
          部署说明:
          1. 使用 docker-compose up -d 启动服务
          2. 验证服务: curl http://localhost:10000/health
          
          构建状态: 成功
          EOF

      - name: Upload server artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-build
          path: |
            server/dist/
            server/package.json
            server/Dockerfile
          retention-days: 30

  # 创建部署包
  create-deployment-package:
    runs-on: ubuntu-latest
    needs: [prepare, build-web, build-server]
    if: ${{ github.event.inputs.build_target == 'all' && needs.build-web.result == 'success' && needs.build-server.result == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web/

      - name: Download server artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-build
          path: server/

      - name: Create deployment package structure
        run: |
          # 创建部署包目录结构
          mkdir -p deployment-package
          
          # 复制 docker-compose.yml 到根目录
          cp docker-compose.yml deployment-package/
          
          # 创建 web 目录结构
          mkdir -p deployment-package/web
          cp -r web/dist deployment-package/web/
          cp web/Dockerfile deployment-package/web/
          
          # 创建 server 目录结构
          mkdir -p deployment-package/server
          cp -r server/dist deployment-package/server/
          cp server/package.json deployment-package/server/
          cp server/Dockerfile deployment-package/server/
          
          # 复制 nginx 配置
          cp -r nginx deployment-package/
          
          # 复制 mysql 初始化脚本
          if [ -d "mysql" ]; then
            cp -r mysql deployment-package/
          fi
          
          # 创建部署说明文件
          cat > deployment-package/README.md << EOF
          # Seek-Self 部署包
          
          ## 构建信息
          - 版本: ${{ needs.prepare.outputs.branch_name }}-${{ needs.prepare.outputs.build_time }}
          - 构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')
          - 分支: ${{ needs.prepare.outputs.branch_name }}
          - 提交: ${{ needs.prepare.outputs.commit_sha }}
          - 构建类型: ${{ github.event.inputs.build_type }}
          
          ## 目录结构
          \`\`\`
          deployment-package/
          ├── docker-compose.yml          # Docker Compose 配置文件
          ├── web/                        # Web 前端
          │   ├── build-info.txt         # 构建信息
          │   ├── dist/                  # 构建产物
          │   └── Dockerfile             # Docker 配置
          ├── server/                     # 后端服务
          │   ├── build-info.txt         # 构建信息
          │   ├── dist/                  # 构建产物
          │   ├── package.json           # 依赖配置
          │   └── Dockerfile             # Docker 配置
          ├── nginx/                      # Nginx 配置
          │   ├── nginx.conf
          │   └── conf.d/
          └── mysql/                      # MySQL 初始化脚本
              └── init/
          \`\`\`
          
          ## 快速部署
          1. 解压部署包到服务器
          2. 进入部署包目录: \`cd deployment-package\`
          3. 启动服务: \`docker-compose up -d\`
          4. 访问应用: http://localhost:10000
          
          ## 服务端口
          - Web 服务: http://localhost:10000
          - MySQL: localhost:3306
          - PeerJS: localhost:3478
          
          ## 停止服务
          \`\`\`bash
          docker-compose down
          \`\`\`
          
          ## 查看日志
          \`\`\`bash
          docker-compose logs -f
          \`\`\`
          EOF

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: seek-self-deployment-${{ needs.prepare.outputs.branch_name }}-${{ needs.prepare.outputs.build_time }}
          path: deployment-package/
          retention-days: 30

  # 构建总结
  build-summary:
    runs-on: ubuntu-latest
    needs: [prepare, build-web, build-server, create-deployment-package]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## 🚀 构建总结" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 构建信息" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 构建时间 | $(date '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| 分支 | ${{ needs.prepare.outputs.branch_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 提交 | ${{ needs.prepare.outputs.commit_sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 构建目标 | ${{ github.event.inputs.build_target }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 构建类型 | ${{ github.event.inputs.build_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 触发者 | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 构建状态" >> $GITHUB_STEP_SUMMARY
          echo "| 组件 | 版本号 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| Web | ${{ needs.prepare.outputs.version_web }} | ${{ needs.build-web.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Server | ${{ needs.prepare.outputs.version_server }} | ${{ needs.build-server.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 部署包 | ${{ needs.prepare.outputs.branch_name }}-${{ needs.prepare.outputs.build_time }} | ${{ needs.create-deployment-package.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 产物下载" >> $GITHUB_STEP_SUMMARY
          echo "构建完成后，可在 Actions 页面的 Artifacts 部分下载以下产物：" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.create-deployment-package.result }}" == "success" ]; then
            echo "🎯 **推荐下载**: \`seek-self-deployment-${{ needs.prepare.outputs.branch_name }}-${{ needs.prepare.outputs.build_time }}\` - 完整部署包" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**部署步骤**:" >> $GITHUB_STEP_SUMMARY
            echo "1. 下载部署包到服务器" >> $GITHUB_STEP_SUMMARY
            echo "2. \`docker-compose up -d\`" >> $GITHUB_STEP_SUMMARY
            echo "3. 访问 http://localhost:10000" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**目录结构**:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "deployment-package/" >> $GITHUB_STEP_SUMMARY
            echo "├── docker-compose.yml" >> $GITHUB_STEP_SUMMARY
            echo "├── web/dist/ + Dockerfile" >> $GITHUB_STEP_SUMMARY
            echo "├── server/dist/ + package.json + Dockerfile" >> $GITHUB_STEP_SUMMARY
            echo "├── nginx/" >> $GITHUB_STEP_SUMMARY
            echo "└── mysql/" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- \`web-build\` - Web 前端构建产物" >> $GITHUB_STEP_SUMMARY
            echo "- \`server-build\` - 服务端构建产物" >> $GITHUB_STEP_SUMMARY
          fi

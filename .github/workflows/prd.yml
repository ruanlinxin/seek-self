name: 发布构建

on:
  push:
    branches: [ main, prd, release ]
  pull_request:
    branches: [ main, prd, release ]
  release:
    types: [ published ]

# 添加权限配置
permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name != 'release' && github.ref != 'refs/heads/release'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'panel/yarn.lock'

      - name: 安装依赖
        run: |
          cd panel
          yarn install --frozen-lockfile

      - name: 构建前端项目
        run: |
          cd panel
          yarn build

      - name: 创建构建产物
        run: |
          # 创建构建目录
          mkdir -p build-${{ github.sha }}
          
          # 复制前端构建结果
          cp -r panel/dist build-${{ github.sha }}/
          
          # 复制前端 Dockerfile 和 nginx.conf
          cp panel/Dockerfile build-${{ github.sha }}/
          cp panel/nginx.conf build-${{ github.sha }}/
          
          # 创建构建信息文件
          cat > build-${{ github.sha }}/BUILD_INFO << EOF
          分支: ${{ github.ref_name }}
          提交哈希: ${{ github.sha }}
          构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')
          触发事件: ${{ github.event_name }}
          EOF
          
          # 创建部署脚本
          cat > build-${{ github.sha }}/deploy.sh << 'EOF'
          #!/bin/bash
          
          echo "开始部署 seek-self-panel..."
          
          # 检查 Docker 是否可用
          if command -v docker &> /dev/null; then
              echo "使用 Docker 部署..."
              docker build -t seek-self-panel:latest .
              docker run -d -p 3000:3000 --name seek-self-panel seek-self-panel:latest
              echo "Docker 部署完成，访问地址: http://localhost:3000"
          else
              echo "Docker 不可用，请手动部署 dist 目录到 Web 服务器"
          fi
          EOF
          
          chmod +x build-${{ github.sha }}/deploy.sh

      - name: 压缩构建产物
        run: |
          tar -czf seek-self-panel-${{ github.sha }}.tar.gz build-${{ github.sha }}/
          zip -r seek-self-panel-${{ github.sha }}.zip build-${{ github.sha }}/

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: seek-self-panel-${{ github.sha }}
          path: |
            seek-self-panel-${{ github.sha }}.tar.gz
            seek-self-panel-${{ github.sha }}.zip
          retention-days: 30

      - name: 输出构建信息
        run: |
          echo "构建完成！"
          echo "分支: ${{ github.ref_name }}"
          echo "提交哈希: ${{ github.sha }}"
          echo "构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "产物已上传到 Actions Artifacts"

  auto-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release' && github.event_name == 'push'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'panel/yarn.lock'

      - name: 安装依赖
        run: |
          cd panel
          yarn install --frozen-lockfile

      - name: 构建前端项目
        run: |
          cd panel
          yarn build

      - name: 生成版本号和时间
        id: version
        run: |
          # 获取当前时间作为版本号
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
          VERSION="v1.0.0-${TIMESTAMP}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "生成的版本号: $VERSION"
          echo "构建时间: $BUILD_TIME"

      - name: 创建发布包
        run: |
          # 创建发布目录
          mkdir -p release-${{ steps.version.outputs.version }}
          
          # 复制前端构建结果
          cp -r panel/dist release-${{ steps.version.outputs.version }}/
          
          # 复制前端 Dockerfile 和 nginx.conf
          cp panel/Dockerfile release-${{ steps.version.outputs.version }}/
          cp panel/nginx.conf release-${{ steps.version.outputs.version }}/
          
          # 创建版本信息文件
          cat > release-${{ steps.version.outputs.version }}/VERSION << EOF
          版本: ${{ steps.version.outputs.version }}
          发布时间: ${{ steps.version.outputs.build_time }}
          发布说明: 自动发布 - Release 分支构建
          构建时间: ${{ steps.version.outputs.build_time }}
          提交哈希: ${{ github.sha }}
          分支: ${{ github.ref_name }}
          EOF
          
          # 创建部署脚本
          cat > release-${{ steps.version.outputs.version }}/deploy.sh << 'EOF'
          #!/bin/bash
          
          echo "开始部署 seek-self-panel..."
          
          # 检查 Docker 是否可用
          if command -v docker &> /dev/null; then
              echo "使用 Docker 部署..."
              docker build -t seek-self-panel:$1 .
              docker run -d -p 3000:3000 --name seek-self-panel-$1 seek-self-panel:$1
              echo "Docker 部署完成，访问地址: http://localhost:3000"
          else
              echo "Docker 不可用，请手动部署 dist 目录到 Web 服务器"
          fi
          EOF
          
          chmod +x release-${{ steps.version.outputs.version }}/deploy.sh

      - name: 压缩发布包
        run: |
          tar -czf seek-self-panel-${{ steps.version.outputs.version }}.tar.gz release-${{ steps.version.outputs.version }}/
          zip -r seek-self-panel-${{ steps.version.outputs.version }}.zip release-${{ steps.version.outputs.version }}/

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Seek Self Panel ${{ steps.version.outputs.version }}"
          body: |
            ## 自动发布
            
            **版本:** ${{ steps.version.outputs.version }}
            **分支:** ${{ github.ref_name }}
            **提交:** ${{ github.sha }}
            **构建时间:** ${{ steps.version.outputs.build_time }}
            
            ### 更新内容
            - 自动构建和发布
            - Release 分支合并触发
            
            ### 下载
            - [seek-self-panel-${{ steps.version.outputs.version }}.tar.gz](seek-self-panel-${{ steps.version.outputs.version }}.tar.gz)
            - [seek-self-panel-${{ steps.version.outputs.version }}.zip](seek-self-panel-${{ steps.version.outputs.version }}.zip)
          files: |
            seek-self-panel-${{ steps.version.outputs.version }}.tar.gz
            seek-self-panel-${{ steps.version.outputs.version }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 输出发布信息
        run: |
          echo "自动发布完成！"
          echo "版本: ${{ steps.version.outputs.version }}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
          echo "构建时间: ${{ steps.version.outputs.build_time }}"

  release-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'panel/yarn.lock'

      - name: 安装依赖
        run: |
          cd panel
          yarn install --frozen-lockfile

      - name: 构建前端项目
        run: |
          cd panel
          yarn build

      - name: 创建发布包
        run: |
          # 创建发布目录
          mkdir -p release-${{ github.event.release.tag_name }}
          
          # 复制前端构建结果
          cp -r panel/dist release-${{ github.event.release.tag_name }}/
          
          # 复制前端 Dockerfile 和 nginx.conf
          cp panel/Dockerfile release-${{ github.event.release.tag_name }}/
          cp panel/nginx.conf release-${{ github.event.release.tag_name }}/
          
          # 创建版本信息文件
          cat > release-${{ github.event.release.tag_name }}/VERSION << EOF
          版本: ${{ github.event.release.tag_name }}
          发布时间: ${{ github.event.release.published_at }}
          发布说明: ${{ github.event.release.body }}
          构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')
          提交哈希: ${{ github.sha }}
          EOF
          
          # 创建部署脚本
          cat > release-${{ github.event.release.tag_name }}/deploy.sh << 'EOF'
          #!/bin/bash
          
          echo "开始部署 seek-self-panel..."
          
          # 检查 Docker 是否可用
          if command -v docker &> /dev/null; then
              echo "使用 Docker 部署..."
              docker build -t seek-self-panel:$1 .
              docker run -d -p 3000:3000 --name seek-self-panel-$1 seek-self-panel:$1
              echo "Docker 部署完成，访问地址: http://localhost:3000"
          else
              echo "Docker 不可用，请手动部署 dist 目录到 Web 服务器"
          fi
          EOF
          
          chmod +x release-${{ github.event.release.tag_name }}/deploy.sh

      - name: 压缩发布包
        run: |
          tar -czf seek-self-panel-${{ github.event.release.tag_name }}.tar.gz release-${{ github.event.release.tag_name }}/
          zip -r seek-self-panel-${{ github.event.release.tag_name }}.zip release-${{ github.event.release.tag_name }}/

      - name: 上传发布包到 Release
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./seek-self-panel-${{ github.event.release.tag_name }}.tar.gz
          asset_name: seek-self-panel-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传 ZIP 包到 Release
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./seek-self-panel-${{ github.event.release.tag_name }}.zip
          asset_name: seek-self-panel-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 输出发布信息
        run: |
          echo "发布完成！"
          echo "版本: ${{ github.event.release.tag_name }}"
          echo "发布说明: ${{ github.event.release.body }}"
          echo "发布时间: ${{ github.event.release.published_at }}"
          echo "构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
